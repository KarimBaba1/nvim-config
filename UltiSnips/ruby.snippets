snippet "^#!" "#!/usr/bin/env ruby" r
#!/usr/bin/env ruby

$0
endsnippet


snippet "^# ?[uU][tT][fF]-?8" "# encoding: UTF-8" r
# encoding: UTF-8
$0
endsnippet



snippet If "<command> if <expression>"
${1:command} if ${0:expression}
endsnippet



snippet Unless "<command> unless <expression>"
${1:command} unless ${0:expression}
endsnippet



snippet if "if <condition> ... end"
if ${1:condition}
	${2:# TODO}
end
endsnippet



snippet ife "if <condition> ... else ... end"
if ${1:condition}
	${2:# TODO}
else
	${3:# TODO}
end
endsnippet



snippet ifee "if <condition> ... elseif <condition> ... else ... end"
if ${1:condition}
	${2:# TODO}
elsif ${3:condition}
	${4:# TODO}
else
	${0:# TODO}
end
endsnippet



snippet unless "unless <condition> ... end"
unless ${1:condition}
	${0:# TODO}
end
endsnippet



snippet unlesse "unless <condition> ... else ... end"
unless ${1:condition}
	${2:# TODO}
else
	${0:# TODO}
end
endsnippet



snippet unlesee "unless <condition> ... elseif <condition> ... else ... end"
unless ${1:condition}
	${2:# TODO}
elsif ${3:condition}
	${4:# TODO}
else
	${0:# TODO}
end
endsnippet



snippet "\b(de)?f" "def <name>..." r
def ${1:function_name}${2: ${3:*args}}
	${0:# TODO}
end
endsnippet



snippet defi "def initialize ..."
def initialize${1: ${2:*args}}
	${0:# TODO}
end
endsnippet



snippet defr "def <name> ... rescue ..."
def ${1:function_name}${2: ${3:*args}}
	${4:# TODO}
rescue
	${0:# TODO}
end
endsnippet



snippet For "(<from>..<to>).each { |<i>| <block> }"
(${1:from}..${2:to}).each { |${3:i}| ${4:# TODO} }
endsnippet



snippet for "(<from>..<to>).each do |<i>| <block> end"
(${1:from}..${2:to}).each do |${3:i}|
	${0:# TODO}
end
endsnippet



snippet "(\S+)\.Merge!" ".merge!(<other_hash>) { |<key>,<oldval>,<newval>| <block> }" r
`!p snip.rv=match.group(1)`.merge!(${1:other_hash}) { |${2:key},${3:oldval},${4:newval}| ${5:block} }
endsnippet



snippet "(\S+)\.merge!" ".merge!(<other_hash>) do |<key>,<oldval>,<newval>| <block> end" r
`!p snip.rv=match.group(1)`.merge!(${1:other_hash}) do |${2:key},${3:oldval},${4:newval}|
	${0:block}
end
endsnippet



snippet "(\S+)\.Del(ete)?_?if" ".delete_if { |<key>,<value>| <block> }" r
`!p snip.rv=match.group(1)`.delete_if { |${1:key},${2:value}| ${3:# TODO} }
endsnippet



snippet "(\S+)\.del(ete)?_?if" ".delete_if do |<key>,<value>| <block> end" r
`!p snip.rv=match.group(1)`.delete_if { |${1:key},${2:value}|
	${0:# TODO}
}
endsnippet



snippet "(\S+)\.Keep_?if" ".keep_if { |<key>,<value>| <block> }" r
`!p snip.rv=match.group(1)`.keep_if { |${1:key},${2:value}| ${3:# TODO} }
endsnippet



snippet "(\S+)\.keep_?if" ".keep_if do <key>,<value>| <block> end" r
`!p snip.rv=match.group(1)`.keep_if do |${1:key},${2:value}|
	${0:# TODO}
end
endsnippet



snippet "(\S+)\.Reject" ".reject { |<key>,<value>| <block> }" r
`!p snip.rv=match.group(1)`.reject { |${1:key},${2:value}| ${3:# TODO} }
endsnippet



snippet "(\S+)\.reject" ".reject do <key>,<value>| <block> end" r
`!p snip.rv=match.group(1)`.reject do |${1:key},${2:value}|
	${0:# TODO}
end
endsnippet



snippet "(\S+)\.Select" ".select { |<item>| <block>}" r
`!p snip.rv=match.group(1)`.select { |${1:item}| ${2:block} }
endsnippet



snippet "(\S+)\.select" ".select do |<item>| <block> end" r
`!p snip.rv=match.group(1)`.select do |${1:item}|
	${0:block}
end
endsnippet



snippet "(\S+)\.Sort" ".sort { |<a>,<b>| <block> }" r
`!p snip.rv=match.group(1)`.sort { |${1:a},${2:b}| ${3:# TODO} }
endsnippet



snippet "(\S+)\.sort" ".sort do |<a>,<b>| <block> end" r
`!p snip.rv=match.group(1)`.sort do |${1:a},${2:b}|
	${0:# TODO}
end
endsnippet



#snippet "(\S+)\.Each_?k(ey)?" ".each_key { |<key>| <block> }" r
#`!p snip.rv=match.group(1)`.each_key { |${1:key}| ${2:# TODO} }
#endsnippet
#
#
#
#snippet "(\S+)\.each_?k(ey)?" ".each_key do |key| <block> end" r
#`!p snip.rv=match.group(1)`.each_key do |${1:key}|
#	${0:# TODO}
#end
#endsnippet
#
#
#
#snippet "(\S+)\.Each_?val(ue)?" ".each_value { |<value>| <block> }" r
#`!p snip.rv=match.group(1)`.each_value { |${1:value}| ${2:# TODO} }
#endsnippet
#
#
#
#snippet "(\S+)\.each_?val(ue)?" ".each_value do |<value>| <block> end" r
#`!p snip.rv=match.group(1)`.each_value do |${1:value}|
#	${0:# TODO}
#end
#endsnippet



snippet "(\S+)\.each" ".each { |<value>| <block> }" r
`!p snip.rv=match.group(1)`.each { |${1:value}|
  ${0}
}
endsnippet

snippet "(\S+)\.map" ".map { |<value>| <block> }" r
`!p snip.rv=match.group(1)`.map { |${1:value}|
  ${0}
}
endsnippet

snippet "(\S+)\.tap" ".tap { |<value>| <block> }" r
`!p snip.rv=match.group(1)`.tap { |${1:value}|
  ${0}
}
endsnippet



#snippet Each "<elements>.each do |<element>| <block> end"
#${1:elements}.each do |${2:${1/s$//}}|
#	${0:# TODO}
#end
#endsnippet



#snippet each_?s(lice)? "<array>.each_slice(n) do |slice| <block> end"
#each_slice(${1:2}) do |${2:slice}|
#	${0:# TODO}
#end
#endsnippet
#
#
#
#snippet Each_?s(lice)? "<array>.each_slice(n) { |slice| <block> }"
#each_slice(${1:2}) { |${2:slice}| ${3:# TODO} }
#endsnippet
#
#
#
#
#snippet "(\S+)\.Map" ".map { |<element>| <block> }" r
#`!p snip.rv=match.group(1)`.map { |${1:`!p
#element_name = match.group(1).lstrip('$@')
#ematch = re.search("([A-Za-z][A-Za-z0-9_]+?)s?[^A-Za-z0-9_]*?$", element_name)
#try:
#	wmatch = re.search("([A-Za-z][A-Za-z0-9_]+)$", ematch.group(1))
#	snip.rv = wmatch.group(1).lower()
#except:
#	snip.rv = 'element'
#`}| ${2:# TODO} }
#endsnippet
#
#
#
#snippet "(\S+)\.map" ".map do |<element>| <block> end" r
#`!p snip.rv=match.group(1)`.map do |${1:`!p
#element_name = match.group(1).lstrip('$@')
#ematch = re.search("([A-Za-z][A-Za-z0-9_]+?)s?[^A-Za-z0-9_]*?$", element_name)
#try:
#	wmatch = re.search("([A-Za-z][A-Za-z0-9_]+)$", ematch.group(1))
#	snip.rv = wmatch.group(1).lower()
#except:
#	snip.rv = 'element'
#`}|
#	${0:# TODO}
#end
#endsnippet
#
#
#
#snippet "(\S+)\.Rev(erse)?_?each" ".reverse_each { |<element>| <block> }" r
#`!p snip.rv=match.group(1)`.reverse_each { |${1:`!p
#element_name = match.group(1).lstrip('$@')
#ematch = re.search("([A-Za-z][A-Za-z0-9_]+?)s?[^A-Za-z0-9_]*?$", element_name)
#try:
#	wmatch = re.search("([A-Za-z][A-Za-z0-9_]+)$", ematch.group(1))
#	snip.rv = wmatch.group(1).lower()
#except:
#	snip.rv = 'element'
#`}| ${2:# TODO} }
#endsnippet
#
#
#
#snippet "(\S+)\.rev(erse)?_?each" ".reverse_each do |<element>| <block> end" r
#`!p snip.rv=match.group(1)`.reverse_each do |${1:`!p
#element_name = match.group(1).lstrip('$@')
#ematch = re.search("([A-Za-z][A-Za-z0-9_]+?)s?[^A-Za-z0-9_]*?$", element_name)
#try:
#	wmatch = re.search("([A-Za-z][A-Za-z0-9_]+)$", ematch.group(1))
#	snip.rv = wmatch.group(1).lower()
#except:
#	snip.rv = 'element'
#`}|
#	${0:# TODO}
#end
#endsnippet
#
#
#
#snippet "(\S+)\.Each" ".each { |<element>| <block> }" r
#`!p snip.rv=match.group(1)`.each { |${1:`!p
#element_name = match.group(1).lstrip('$@')
#ematch = re.search("([A-Za-z][A-Za-z0-9_]+?)s?[^A-Za-z0-9_]*?$", element_name)
#try:
#	wmatch = re.search("([A-Za-z][A-Za-z0-9_]+)$", ematch.group(1))
#	snip.rv = wmatch.group(1).lower()
#except:
#	snip.rv = 'element'
#`}| ${2:# TODO} }
#endsnippet
#
#
#
#snippet "(\S+)\.each" ".each do |<element>| <block> end" r
#`!p snip.rv=match.group(1)`.each do |${1:`!p
#element_name = match.group(1).lstrip('$@')
#ematch = re.search("([A-Za-z][A-Za-z0-9_]+?)s?[^A-Za-z0-9_]*?$", element_name)
#try:
#	wmatch = re.search("([A-Za-z][A-Za-z0-9_]+)$", ematch.group(1))
#	snip.rv = wmatch.group(1).lower()
#except:
#	snip.rv = 'element'
#`}|
#	${0:# TODO}
#end
#endsnippet
#
#
#
#
#snippet "(\S+)\.Each_w(ith)?_?i(ndex)?" ".each_with_index { |<element>,<i>| <block> }" r
#`!p snip.rv=match.group(1)`.each_with_index { |${1:`!p
#element_name = match.group(1).lstrip('$@')
#ematch = re.search("([A-Za-z][A-Za-z0-9_]+?)s?[^A-Za-z0-9_]*?$", element_name)
#try:
#	wmatch = re.search("([A-Za-z][A-Za-z0-9_]+)$", ematch.group(1))
#	snip.rv = wmatch.group(1).lower()
#except:
#	snip.rv = 'element'
#`},${2:i}| ${3:# TODO} }$0
#endsnippet
#
#
#
#snippet "(\S+)\.each_?w(ith)?_?i(ndex)?" ".each_with_index do |<element>,<i>| <block> end" r
#`!p snip.rv=match.group(1)`.each_with_index do |${1:`!p
#element_name = match.group(1).lstrip('$@')
#ematch = re.search("([A-Za-z][A-Za-z0-9_]+?)s?[^A-Za-z0-9_]*?$", element_name)
#try:
#	wmatch = re.search("([A-Za-z][A-Za-z0-9_]+)$", ematch.group(1))
#	snip.rv = wmatch.group(1).lower()
#except:
#	snip.rv = 'element'
#`},${2:i}|
#	${0:# TODO}
#end
#endsnippet
#
#
#
#
#snippet "(\S+)\.Each_?p(air)?"  ".each_pair { |<key>,<value>| <block> }" r
#`!p snip.rv=match.group(1)`.each_pair { |${1:key},${2:value}| ${3:# TODO} }
#endsnippet
#
#
#
#snippet "(\S+)\.each_?p(air)?" ".each_pair do |<key>,<value>| <block> end" r
#`!p snip.rv=match.group(1)`.each_pair do |${1:key},${2:value}|
#	${0:# TODO}
#end
#endsnippet
#
#
#
#snippet "(\S+)\.sub" ".sub(<expression>) { <block> }" r
#`!p snip.rv=match.group(1)`.sub(${1:expression}) { ${2:"replace_with"} }
#endsnippet
#
#
#
#snippet "(\S+)\.gsub" ".gsub(<expression>) { <block> }" r
#`!p snip.rv=match.group(1)`.gsub(${1:expression}) { ${2:"replace_with"} }
#endsnippet
#
#
#
#snippet "(\S+)\.index" ".index { |item| <block> }" r
#`!p snip.rv=match.group(1)`.index { |${1:item}| ${2:block} }
#endsnippet
#
#
#
#snippet "(\S+)\.Index" ".index do |item| ... end" r
#`!p snip.rv=match.group(1)`.index do |${1:item}|
#	${0:block}
#end
#endsnippet
#
#

#snippet do "do |<key>| ... end" i
#do ${1:|${2:key}|}
#	$0
#end
#endsnippet
#
#
#
#snippet Do "do ... end" i
#do
#	$0
#end
#endsnippet


snippet until "until <expression> ... end"
until ${1:expression}
	${0:# TODO}
end
endsnippet



snippet Until "begin ... end until <expression>"
begin
	${0:# TODO}
end until ${1:expression}
endsnippet



snippet while "while <expression> ... end"
while ${1:expression}
	${0:# TODO}
end
endsnippet



snippet While "begin ... end while <expression>"
begin
	${0:# TODO}
end while ${1:expression}
endsnippet



snippet "\b(r|attr)" "attr_reader :<attr_names>" r
attr_reader :${0:attr_names}
endsnippet



snippet "\b(w|attr)" "attr_writer :<attr_names>" r
attr_writer :${0:attr_names}
endsnippet



snippet "\b(rw|attr)" "attr_accessor :<attr_names>" r
attr_accessor :${0:attr_names}
endsnippet



#snippet begin "begin ... rescue ... end"
#begin
#	${1:# TODO}
#rescue
#	${0:# TODO}
#end
#endsnippet



#snippet begin "begin ... rescue ... else ... ensure ... end"
#begin
#	${1:# Raise exception}
#rescue Exception => e
#	puts e.message
#	puts e.backtrace.inspect
#	${2:# Rescue}
#else
#	${3:# other exception}
#ensure
#	${0:# always excute}
#end
#endsnippet



snippet rescue
rescue Exception => e
	puts e.message
	puts e.backtrace.inspect
	${0:# Rescue}
endsnippet



snippet "\b(case|sw(itch)?)" "case <variable> when <expression> ... end" r
case ${1:variable}
when ${2:expression}
$0
end
endsnippet



snippet alias "alias :<new_name> :<old_name>"
alias :${1:new_name} :${2:old_name}
endsnippet



snippet class "class <class_name> def initialize ... end end"
class ${1:class_name}
	def initialize ${2:*args}
		$0
	end
end
endsnippet



snippet module "module"
module ${1:module_name}
	$0
end
endsnippet



snippet ###
=begin
  $0
=end
endsnippet

# vim: set ts=2 sw=2 expandtab:

snippet xml_accessor "XML accessor for active model" b
xml_accessor :${1:code}${2:, :from => :attr}${3:, :as => []}${4:, :in => 'code'}$0
endsnippet

snippet appcaramodel "AppCara::Models" b
class ${1:Name} < AppCara::Models::Base
  xml_name '${2:xml_name}'
  $0
end
endsnippet

snippet debug2 "debugger" b
require 'debugger' ; \`wmctrl -a 'Rackup `pwd | awk -F/ '{print $(NF-1)}'`'\` ; debugger; true
endsnippet

snippet debug "debugger" b
unless @no_debug
	require 'debugger'
	\`wmctrl -a 'loper tmux'\`
	debugger
	true
end
endsnippet

snippet debugs "debugger" b
require 'debugger' ; \`wmctrl -a 'shopadmin'\` ; debugger; true
endsnippet

snippet wdebug "wrap debugger" !b
begin
${0:${VISUAL}}
rescue => ex
  require 'ruby-debug'
  debugger
  true
end
endsnippet

snippet dm "datamapper model" b
class ${1:model} < Models::Base
  include DataMapper::Resource

  property :id, Serial
  $0
  property :created_at, DateTime
  property :updated_at, DateTime
end
endsnippet

snippet prop "Datamapper String property" b
property :${1:name}, String${3:, :required => true}${4:, :unique => true}${5:, :length => ${6:200}}$0
endsnippet

snippet prop "Datamapper Integer property" b
property :${1:name}, Integer, :default => $2${0:, :required => true}
endsnippet

snippet prop "Datamapper Enum property" b
property :${1:name}, Enum[$2], :default => $0
endsnippet

snippet prop "Datamapper Boolean property" b
property :${1:name}, Boolean, :default => $0
endsnippet

snippet hasn "datamapper has n" b
has n, :${1:messages}, :constraint => :${2:destroy}$0
endsnippet

snippet ced "cloudengine documentation" b
#
# @api_name ${2:GetAccountInstalledApps}
# @param <api_key> User API key must be provided
# @param <cloud_profile_name> cloud profile name must be provided
# @param <cloud_region> cloud region must be provided
# @visibility ${0:public}
endsnippet

snippet cedp "cloudengine documentation params" b
# @param <${1:api_key}> ${0:User API key must be provided}
endsnippet

snippet task "Rake task" b
desc "${1:Desc}"
task :${2:task_name} do${3: |t, args|}
  $0
end
endsnippet

snippet migration "Datamapper migration" b
# Purpose:     ${1:purpose}
# Redmine:     #${2:4455}
# Added by:    Loki Ng
# Created on:  `date`
migration ${4:no}, "${1/(\w+)\s+/\L$1_\E/g}" do
  up do
    $0
  end
  down do
  end
end
endsnippet

snippet route "New Sinatra Route" b
${1:get} '${2:path}' do${3: |${4:params}|}
  $0
  true
end
endsnippet

snippet logger "AppStack Logger" b
AppCara::Logger.instance
endsnippet

snippet begin "begin rescue end" b
begin
  ${VISUAL}
rescue => ex
	require 'pry-remote' ; \`sh -c focus-pry\` and binding.remote_pry
end
endsnippet

snippet has1 "datamapper has 1" b
has 1, :$1, :constraint => :$0
endsnippet

snippet /\.ewo/ "each with object" r
.each_with_object({}) { |${1:object}, h|
  $0
}
endsnippet

snippet /\.ewi/ "each with index" r
.each_with_index { |${1:object}, i|
  $0
}
endsnippet

snippet /yp/ "Params for yardoc" r
@param [${1:String}] $0
endsnippet

snippet /yr/ "Description" r
@return [${1:String}] $0
endsnippet

snippet /ilog/ "info event log" r
add_info_event_log(
  operation: $0,
  description: ${VISUAL},
${1:  is_admin: true,}
)
endsnippet

snippet /elog/ "error event log" r
add_error_event_log(
  operation: $0,
  description: ${VISUAL},
${1:  is_admin: true,}
)
endsnippet

snippet codedoc "Doc. in code" b
# $0
# @param [String] package_name package name that it is belonging to
# @return [Boolean] if the update success or not
endsnippet

snippet erb_out "erb_out" b
erb_out "${1:main}", "${2:index}", "${3:Title}"
endsnippet

snippet let "rspec let" b
let(:$1) {
	$0
}
endsnippet

snippet api_spec "api rspec" b
describe 'get /$1' do
  it 'should return $2' do
    pending
  end
end
endsnippet

snippet it "rspec it clause" b
it '$1' do
	$0
end
endsnippet

snippet context "rspec context clause" b
context '$1' do
	$0
end
endsnippet

snippet hn "Hash.new"
Hash.new { |h, ${1:k}|
	$0
}
endsnippet

snippet time "time" b
require 'benchmark'
_t = Benchmark.measure do
  ${VISUAL}
end
puts _t
endsnippet

snippet /i18/ "i18n" r
i18("locales/$0")
endsnippet

snippet loop "do loop block" b
loop do
  $0
  break if $1
end
endsnippet

snippet desc "describe" b
describe '$1' do
	$0
end
endsnippet

snippet expect "expect" b
expect(${1:${VISUAL}}).to be_$0
endsnippet

snippet /find/ "find" r
find { |${1:obj}|
	$0
}
endsnippet

snippet /times/ "times loop" r
times { |i|
	$0
}
endsnippet

snippet pry "pry-remote" b
require 'pry-remote' ; \`sh -c focus-pry\` and binding.remote_pry
endsnippet

# snippet pry "pry-remote with random port" b
# \`sh -c focus-pry ${0:`shuf -i 5000-9999 -n1`}\` and binding.remote_pry(nil, $0)
# endsnippet

# snippet pry "pry-remote with random port" b
# _pry_port = rand(10001..15000) and \`sh -c focus-pry ${_pry_port}\` and binding.remote_pry(nil, _pry_port)
# endsnippet

snippet pryb "pry block" b
require 'pry'; binding.pry
endsnippet


snippet sequential "sequential task" b
sequential def $0(request)
	update_progress('Build docker image completed')
end
endsnippet

snippet concurrent "concurrent task" b
concurrent Appcara::WorkloadWorker, parser: -> req {
	info = {account: req['account']}
	req['workloads'].map { |name|
		[:decommission, "Decommission workload #{name} (Concurrent)", info.merge(name: name)]
	}
}
endsnippet

snippet todo "todo" b
# @TODO loki, `date +"%d/%m/%Y"`: $0
endsnippet

snippet fixme "fixme" b
# @FIXME loki, `date +"%d/%m/%Y"`: $0
endsnippet

snippet profiling "profiling hooks" b
__st = Time.now.to_f
puts "1. #{(Time.now.to_f - __st).round(3)}s"; __st = Time.now.to_f
# qa yypww<c-a>yy @a @@ @@ ...
endsnippet
