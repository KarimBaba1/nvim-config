#!/usr/bin/env node

const puppeteer = require('puppeteer');
const fs = require('fs');
const {promisify} = require('util');
const child_process = require('child_process');

const projectName = process.env.COMPOSE_PROJECT_NAME;
const pipePath = `/tmp/nvim-uid-${projectName}.sock`;

const execP = (cli, options) =>
  new Promise((resolve, reject) => {
    child_process.exec(cli, options, (error, stdout) => {
      error ? reject(error.message) : resolve(stdout);
    });
  });

let browser = null;
let fd = null;

const main = async () => {
  browser = await puppeteer.launch({
    ignoreHTTPSErrors: true,
    defaultViewport: {
      width: 1024,
      height: 768,
      deviceScaleFactor: 1.5,
    },
  });
  const page = await browser.newPage();

  const previewer = child_process.spawn("ueberzug", ["layer", "--silent", "--parser", "bash"]);
  previewer.stdin.setEncoding('utf-8');
  previewer.stdout.pipe(process.stdout);

  await execP(`rm -f ${pipePath}`);
  child_process.spawnSync('mkfifo', [pipePath]);
  fd = await promisify(fs.open)(pipePath, fs.constants.O_RDWR);
  const stream = fs.createReadStream(null, {fd, autoClose: false});
  console.log(`listening to ${pipePath}`);
  stream.on('data', async (d) => {
    const msg = d.toString();
    console.log(`Received msg: ${msg}`);
    const parts = msg.split(' ');

    if (parts[0] === "url") {
      const imgDir = `${process.env.HOME}/.nvim-uid`;
      if (!fs.existsSync(imgDir)) {
        console.log(`${imgDir} does not exists, please create with:`);
        console.log(`  mkdir -p ~/.nvim-uid`);
        console.log(`\nand even make it a ramdisk`);
        console.log(`  sudo mount -t tmpfs -o size=100m tmpfs ~/.nvim-uid`);
        return;
      }
      const imgPath = `${imgDir}/web.png`;
      await page.goto(parts[1]);
      await page.screenshot({
        path: imgPath,
        fullPage: true,
      });
      const size = await execP("tmux lsp -F '#{pane_height} #{pane_width}' | head -n1");
      const [h, w] = size.trim().split(' ');
      const cmd = [
        'declare -Ap cmd=([action]=add [identifier]="preview"',
        '[x]="0" [y]="1"',
        '[scaler]="fit_contain"',
        // '[scaler]="forced_cover"',
        // '[scaling_position_x]="0.5"',
        // '[scaling_position_y]="0.5"',
        `[width]="${w}" [height]="${h}" [path]="${imgPath}")`
      ].join(' ');
      previewer.stdin.write(`${cmd}\n`);
      console.clear();
    }
  });
}

main();

process.on('SIGINT', () => {
  browser.close();
  fs.closeSync(fd);
  fs.unlinkSync(pipePath);
  process.kill(process.pid, 'SIGTERM');
});
